const path=require("path"),fs=require("fs"),metaReg=/^\s*\/\*([\s\S]*?)\*\//m,docKeyReg=/^[\s\*]*@(path|method|params|desc|type|headers)\s*([\s\S]+)$/gi,descReg=/^\s*((["'])([^\2]+)\2|([^\s]+))\s*:\s*((['"])[^\6]+\6|[\s\S]*\/\/([^$]+))$/,parseMeta=data=>{const meta={method:"get",type:"json"};let dt=data,matched=!0;for(;matched;)matched=!1,dt=dt.replace(metaReg,(all,contents)=>{matched=!0;let paramsMap={},hasParamMap=!1;return contents.split(/\n/).forEach(line=>{line.replace(docKeyReg,(str,type,val)=>{if("params"===type&&/^\.([^\s]+)/.test(val)){let key=RegExp.$1,columns=val.replace(/^\.([^\s]+)/,"").split(/\s*,\s*/);return columns.length>3&&(columns[2]=columns.slice(2).join(","),columns.length=3),paramsMap[key]=columns,void(hasParamMap=!0)}meta[type]=val})}),hasParamMap&&(meta.paramsMap=paramsMap),""});let respDescMap={};return dt.split(/\n/).forEach(line=>{descReg.test(line)&&RegExp.$7&&(respDescMap[RegExp.$3||RegExp.$4]=RegExp.$7)}),meta.respDescMap=respDescMap,meta},findAPIs=pathName=>{let arr=[];return fs.readdirSync(pathName).forEach(fileName=>{if(!/^\./.test(fileName)){let filePath=path.join(pathName,fileName);if(fs.statSync(filePath).isDirectory()){let apis=[],dir={name:fileName,apis:apis};arr.push(dir),fs.readdirSync(filePath).forEach(api=>{let data=fs.readFileSync(path.join(filePath,api),"utf8");apis.push(parseMeta(data))})}}}),arr};module.exports=(configs=>{let projects=[];return configs.forEach(config=>{let mockConfig=config.mockConfig;if(mockConfig){let mockPath=mockConfig.path,rules=findAPIs(path.resolve(mockPath));projects.push({path:"",rules:rules})}}),projects});