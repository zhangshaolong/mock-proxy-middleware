"use strict";const URL=require("url"),fs=require("fs"),path=require("path"),utilsTool=require("./utils"),proxyTool=require("./proxy"),mockTool=require("./mock"),encoding=utilsTool.encoding,mergeConfigs=(publicConfigs,personalConfigs)=>{const publicRuleMap={},personalRuleMap={},mergedConfigs=[];for(let i=0;i<publicConfigs.length;i++){const publicConfig=publicConfigs[i],rules=[].concat(publicConfig.rules);for(let j=0;j<rules.length;j++){const rule=rules[j];publicRuleMap[rule]=Object.assign({},publicConfig,{rules:[rule]})}}for(let i=0;i<personalConfigs.length;i++){const personalConfig=personalConfigs[i],rules=[].concat(personalConfig.rules);for(let j=0;j<rules.length;j++){const rule=rules[j];personalRuleMap[rule]=Object.assign({},publicRuleMap[rule],personalConfig,{rules:[rule]})}}for(let i=0;i<personalConfigs.length;i++){const personalConfig=personalConfigs[i],rules=[].concat(personalConfig.rules);for(let j=0;j<rules.length;j++)mergedConfigs.push(personalRuleMap[rules[j]])}for(let i=0;i<publicConfigs.length;i++){const publicConfig=publicConfigs[i],rules=[].concat(publicConfig.rules);for(let j=0;j<rules.length;j++){const rule=rules[j];personalRuleMap[rule]||mergedConfigs.push(publicRuleMap[rule])}}return mergedConfigs};module.exports=((publicConfigs,personalConfigPath)=>{let publicConfigPath;return"string"==typeof publicConfigs&&(publicConfigPath=publicConfigs),(req,res,next)=>{if(publicConfigPath&&(delete require.cache[publicConfigPath],publicConfigs=require(publicConfigPath)),"string"==typeof personalConfigPath){delete require.cache[personalConfigPath];try{const personalConfigs=require(personalConfigPath);publicConfigs=mergeConfigs(publicConfigs,personalConfigs)}catch(e){}}const urlInfo=URL.parse(req.url,!0),cfg=utilsTool.getApiConfig(urlInfo.pathname,publicConfigs);if(cfg){const isFormData=(req.headers["content-type"]||"text/plain;charset="+encoding).indexOf("application/x-www-form-urlencoded")>-1,method=req.method.toUpperCase(),headers={};for(let key in req.headers)headers[key]=req.headers[key];let proxyConfig=proxyTool.getProxy(req,cfg.proxyConfig);utilsTool.getParams(req,urlInfo.query,method,isFormData,proxyConfig).then(params=>{proxyConfig?proxyTool.doProxy(req,res,headers,params,method,proxyConfig):mockTool.doMock(urlInfo.pathname,req,res,params,cfg)})}else{if("/show-apis"!==urlInfo.pathname)return next();res.end(require("./render")(utilsTool.getApiDocData(publicConfigs)))}}});