const http=require("http"),https=require("https"),chrome=require("chrome-cookies-secure"),utilsTool=require("./utils"),encoding=utilsTool.encoding,cacheCookies={},pendings={},showProxyLog=(options,method,redirectUrl,data)=>{data.length>2e3?console.log(`proxy request: \n\tHost:${options.host}\n\tPort:${options.port}\n\tMethod:${method}\n\tPath:${redirectUrl}\n\tParams:too large not display`):console.log(`proxy request: \n\tHost:${options.host}\n\tPort:${options.port}\n\tMethod:${method}\n\tPath:${redirectUrl}\n\tParams:${data}`)},flushQueues=(host,cookies)=>{pendings[host]&&(pendings[host].forEach(resolve=>{resolve(cookies)}),pendings[host].length=0)},getProxyCookies=(host,syncCookie)=>{let cachedHost=cacheCookies[host];cachedHost||(cachedHost=cacheCookies[host]={});const{ts:ts,cookies:cookies,status:status}=cachedHost;if(ts){if(!syncCookie)return Promise.resolve(cookies);if(Date.now()-ts<=syncCookie)return Promise.resolve(cookies)}if("pending"===status){let queues=pendings[host];return queues||(queues=pendings[host]=[]),new Promise(resolve=>{queues.push(resolve)})}return new Promise(resolve=>{try{cachedHost.status="pending",chrome.getCookies(host,function(err,cookies){err?(resolve({}),flushQueues(host,{})):(resolve(cookies),flushQueues(host,cookies),cacheCookies[host]={ts:Date.now(),cookies:cookies,status:"done"})})}catch(e){resolve({})}})},proxyResponse=(proxyRes,res)=>{let headers=proxyRes.headers,statusCode=proxyRes.statusCode;try{if(headers)for(let key in headers)res.setHeader(key,headers[key]);res.writeHead(statusCode)}catch(e){console.log("setHeader error",e.message)}utilsTool.mergeData(proxyRes).then(data=>{res.end(data,encoding)})},getProxy=(request,proxyConfig)=>{if(proxyConfig&&proxyConfig.host){const excludes=proxyConfig.excludes;if(excludes)for(let i=0;i<excludes.length;i++)if(new RegExp(excludes[i]).test(request.path))return!1;return proxyConfig}return!1},doProxy=(request,response,headers,params,method,proxyConfig)=>{const isHttps=null!=proxyConfig.isHttps?proxyConfig.isHttps:"https"===request.protocol;let redirectUrl=request.url;proxyConfig.redirect&&(redirectUrl=proxyConfig.redirect(redirectUrl)),headers.host=proxyConfig.host+(proxyConfig.port?":"+proxyConfig.port:""),headers.connection="close",getProxyCookies(`http${isHttps?"s":""}://${headers.host}`,proxyConfig.syncCookie).then((cookies={})=>{const mergedCookies={...cookies};if(proxyConfig.headers){const configCookieStr=proxyConfig.headers.cookie;if(configCookieStr){let cookieKv=configCookieStr.split(/\s*;\s*/);for(let i=0;i<cookieKv.length;i++){let cookiePair=cookieKv[i].split(/=/);mergedCookies[cookiePair[0]]=cookiePair[1]}}}const mergedCookieArr=[];for(let key in mergedCookies)mergedCookieArr.push(`${key}=${escape(unescape(mergedCookies[key]))}`);headers={...headers,...proxyConfig.headers,...{cookie:mergedCookieArr.join(";")}};const options={host:proxyConfig.host,path:redirectUrl,method:request.method,headers:headers,timeout:proxyConfig.timeout||3e4,rejectUnauthorized:!1,agent:!1};proxyConfig.port&&(options.port=proxyConfig.port),showProxyLog(proxyConfig,method,redirectUrl,params),((postData,options)=>{let proxyReq=(isHttps?https:http).request(options,proxyRes=>{proxyResponse(proxyRes,response)});proxyReq.on("error",e=>{response.end(JSON.stringify({status:500,e:e.message})),console.log("proxyReq error: "+e.message)}),"POST"===method?proxyReq.end(postData,encoding):request.pipe(proxyReq)})(params,options)})};module.exports={doProxy:doProxy,getProxy:getProxy};