const path=require("path"),fs=require("fs"),utilsTool=require("./utils"),encoding=utilsTool.encoding,cachedApis={},slashReg=/^\/|\/$/g,semReg=/\s*;\s*$/,metaReg=/^\s*\/\*([\s\S]*?)\*\//m,isMockDataReg=/^\s*(?:function|\{)/,doMock=(pathName,request,response,params,options)=>{let mockPath=options.mockConfig&&options.mockConfig.path||"mock";try{const rules=[].concat(options.rules),len=rules.length;for(let i=0;i<len;i++){let rule=new RegExp(rules[i]),isApi=!1;if(pathName.replace(rule,match=>{const parts=(pathName=pathName.replace(match,"_").replace(/^_|_$/,"")).replace(slashReg,"").split(/\//);pathName=path.resolve(mockPath,match.replace(slashReg,"").replace(/\//g,"_"),parts.join("_")),isApi=!0}),isApi)break}pathName+=options.mockConfig&&options.mockConfig.ext||".js",fs.exists(pathName,exist=>{if(exist){let mtime=fs.statSync(pathName).mtime.getTime(),cachedApi=cachedApis[pathName];if(!cachedApi||cachedApi.mtime!==mtime)try{let content=new String(fs.readFileSync(pathName,encoding),encoding).trim(),matched=!0;for(;matched;)matched=!1,content=content.replace(metaReg,(all,contents)=>(matched=!0,""));content=content.replace(semReg,""),isMockDataReg.test(content)&&(content="return ("+content+")");let result=Function(content)();cachedApis[pathName]=cachedApi={result:result,mtime:mtime}}catch(e){try{const content=fs.readFileSync(pathName,"binary");response.writeHead(200),response.write(content,"binary"),response.end()}catch(e){response.writeHead(500),response.end(JSON.stringify(e.message))}return}let result=cachedApi.result;"function"==typeof result&&(result=result(params,{require:require,request:request,response:response,__dirname:path.resolve(pathName,".."),tools:{}})),response.writeHead(200,{"Content-Type":"text/plain;charset="+encoding}),isNaN(result.sleep)?("string"!=typeof result&&(result=JSON.stringify(result)),response.end(result,encoding)):setTimeout(()=>{try{let copy=JSON.parse(JSON.stringify(result));delete copy.sleep,response.end(JSON.stringify(copy),encoding)}catch(e){response.end(JSON.stringify({code:500,url:reqUrl,e:e}),encoding)}},result.sleep)}else response.writeHead(500),response.end(pathName+" file is not existed~")})}catch(e){response.writeHead(500),response.end(JSON.stringify(e.message))}};module.exports={doMock:doMock};